{"message":"`client` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement","code":{"code":"E0759","explanation":"Return type involving a trait did not require `'static` lifetime.\n\nErroneous code examples:\n\n```compile_fail,E0759\nuse std::fmt::Debug;\n\nfn foo(x: &i32) -> impl Debug { // error!\n    x\n}\n\nfn bar(x: &i32) -> Box<dyn Debug> { // error!\n    Box::new(x)\n}\n```\n\nAdd `'static` requirement to fix them:\n\n```\n# use std::fmt::Debug;\nfn foo(x: &'static i32) -> impl Debug + 'static { // ok!\n    x\n}\n\nfn bar(x: &'static i32) -> Box<dyn Debug + 'static> { // ok!\n    Box::new(x)\n}\n```\n\nBoth [`dyn Trait`] and [`impl Trait`] in return types have an implicit\n`'static` requirement, meaning that the value implementing them that is being\nreturned has to be either a `'static` borrow or an owned value.\n\nIn order to change the requirement from `'static` to be a lifetime derived from\nits arguments, you can add an explicit bound, either to an anonymous lifetime\n`'_` or some appropriate named lifetime.\n\n```\n# use std::fmt::Debug;\nfn foo(x: &i32) -> impl Debug + '_ {\n    x\n}\nfn bar(x: &i32) -> Box<dyn Debug + '_> {\n    Box::new(x)\n}\n```\n\nThese are equivalent to the following explicit lifetime annotations:\n\n```\n# use std::fmt::Debug;\nfn foo<'a>(x: &'a i32) -> impl Debug + 'a {\n    x\n}\nfn bar<'a>(x: &'a i32) -> Box<dyn Debug + 'a> {\n    Box::new(x)\n}\n```\n\n[`dyn Trait`]: https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[`impl Trait`]: https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1200,"byte_end":1236,"line_start":37,"line_end":37,"column_start":35,"column_end":71,"is_primary":false,"text":[{"text":"async fn consume_response(client: &mut ConfigControllerClient<Channel>) -> Result<(), Box<dyn Error + '_>> {","highlight_start":35,"highlight_end":71}],"label":"this data with an anonymous lifetime `'_`...","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1192,"byte_end":1198,"line_start":37,"line_end":37,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"async fn consume_response(client: &mut ConfigControllerClient<Channel>) -> Result<(), Box<dyn Error + '_>> {","highlight_start":27,"highlight_end":33}],"label":"...is used here...","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1192,"byte_end":1198,"line_start":37,"line_end":37,"column_start":27,"column_end":33,"is_primary":false,"text":[{"text":"async fn consume_response(client: &mut ConfigControllerClient<Channel>) -> Result<(), Box<dyn Error + '_>> {","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":1741,"byte_end":1754,"line_start":52,"line_end":52,"column_start":34,"column_end":47,"is_primary":false,"text":[{"text":"    let virtual_network_thread = thread::spawn(move || {","highlight_start":34,"highlight_end":47}],"label":"...and is required to live as long as `'static` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`'static` lifetime requirement introduced by this bound","code":null,"level":"note","spans":[{"file_name":"/home/mhenkel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/mod.rs","byte_start":23225,"byte_end":23232,"line_start":621,"line_end":621,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"    F: Send + 'static,","highlight_start":15,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0759]\u001b[0m\u001b[0m\u001b[1m: `client` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:37:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0masync fn consume_response(client: &mut ConfigControllerClient<Channel>) -> Result<(), Box<dyn Error + '_>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis data with an anonymous lifetime `'_`...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m...is used here...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let virtual_network_thread = thread::spawn(move || {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...and is required to live as long as `'static` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `'static` lifetime requirement introduced by this bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mhenkel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/mod.rs:621:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    F: Send + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0759`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0759`.\u001b[0m\n"}
